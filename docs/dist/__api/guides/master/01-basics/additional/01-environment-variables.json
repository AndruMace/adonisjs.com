{"type":"root","children":[{"type":"element","tag":"dimertitle","props":{},"children":[{"type":"text","value":"Environment Variables"}]},{"type":"element","tag":"h1","props":{"id":"environment-variables"},"children":[{"type":"element","tag":"a","props":{"href":"#environment-variables","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Environment Variables"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As the name suggests, environment variables are the values that differ across different environments For example: having different database credentials in development and production environments."}]},{"type":"element","tag":"div","props":{"className":["toc-container"]},"children":[{"type":"element","tag":"h2","props":{},"children":[{"type":"text","value":"Table of contents"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#how-environment-variables-are-defined"},"children":[{"type":"text","value":"How environment variables are defined?"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#accessing-environment-variables-in-nodejs"},"children":[{"type":"text","value":"Accessing environment variables in Node.js"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#adonisjs-env-module"},"children":[{"type":"text","value":"AdonisJS Env module"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#validating-environment-variables"},"children":[{"type":"text","value":"Validating environment variables"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#casting-values-to-correct-data-types"},"children":[{"type":"text","value":"Casting values to correct data types"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#intellisense-support"},"children":[{"type":"text","value":"Intellisense support"}]}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Environment variables is such a widely accepted concept that you will find them everywhere and hence AdonisJS supports them too. In this guide, we will cover the following topics"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Validating environment variables"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":".env"}]},{"type":"text","value":" files during development"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"And validating environment variables"}]}]},{"type":"element","tag":"h2","props":{"id":"how-environment-variables-are-defined"},"children":[{"type":"element","tag":"a","props":{"href":"#how-environment-variables-are-defined","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"How environment variables are defined?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The simplest way to define environment variables is to make use of the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"set"}]},{"type":"text","value":" keyword on your command line. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-sh","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">NODE_ENV</span><span class=\"token operator\">=</span>development\n\n<span class=\"token comment\"># now start the server</span>\nnode server.js\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Defining environment variables like above is a tedious task and hence most of the cloud providers like "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Heroku"}]},{"type":"text","value":", "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Cleavr"}]},{"type":"text","value":" or "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"AWS"}]},{"type":"text","value":" let you define the environment variables from their control panel."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Similarly, many frameworks (including AdonisJS) let you define environment variables inside the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":".env"}]},{"type":"text","value":" file during development. The dotenv file uses the bash syntax for defining variables as a key-value pair. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":".env"}]},{"type":"element","tag":"pre","props":{"className":["language-sh","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token assign-left variable\">NODE_ENV</span><span class=\"token operator\">=</span>development\n<span class=\"token assign-left variable\">PORT</span><span class=\"token operator\">=</span><span class=\"token number\">3333</span>\n<span class=\"token assign-left variable\">HOST</span><span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"accessing-environment-variables-in-nodejs"},"children":[{"type":"element","tag":"a","props":{"href":"#accessing-environment-variables-in-nodejs","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Accessing environment variables in Node.js"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Node.js let you read the environment variables using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"process.env"}]},{"type":"text","value":" object. Try logging the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"env"}]},{"type":"text","value":" object and you will see all the values available to your application at runtime."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"adonisjs-env-module"},"children":[{"type":"element","tag":"a","props":{"href":"#adonisjs-env-module","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"AdonisJS Env module"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The Env module of AdonisJS brings some improvements over the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"process.env"}]},{"type":"text","value":" API offered by Node. You can import and use the module as follows:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Env <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Core/Env'</span>\n\nEnv<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NODE_ENV'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// with default value</span>\nEnv<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NODE_ENV'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"validating-environment-variables"},"children":[{"type":"element","tag":"a","props":{"href":"#validating-environment-variables","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Validating environment variables"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Environment variables are injected from outside-in to your application and you have little or no control over them within your codebase."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Missing or in-correct values can lead to unstable or in-secure behavior and hence it is extremely important to validate environment variables during the application boot cycle."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"AdonisJS has first class support for validating environment variables. All of the validation rules are defined inside the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"env.ts"}]},{"type":"text","value":" file inside the project root."}]},{"type":"element","tag":"div","props":{"className":["alert","alert-note"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Feel free to create the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"env.ts"}]},{"type":"text","value":" file if it is missing. Also make sure that you are using "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"@adonisjs/core@5.0.4-preview-rc"}]},{"type":"text","value":" or greater."}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Env <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Core/Env'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Env<span class=\"token punctuation\">.</span><span class=\"token function\">rules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">HOST</span><span class=\"token operator\">:</span> Env<span class=\"token punctuation\">.</span>schema<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> format<span class=\"token operator\">:</span> <span class=\"token string\">'host'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">PORT</span><span class=\"token operator\">:</span> Env<span class=\"token punctuation\">.</span>schema<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ... rest of the validations</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"It is optional to validate your environment variables. However, we encourage you to validate them."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"All the environment variables, regardless of whether they are defined inside the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":".env"}]},{"type":"text","value":" file or not can be validated."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"You can also use your own functions for custom validations."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Out of the box, the following methods are available for validating the environment variables."}]},{"type":"element","tag":"h4","props":{"id":"envschemastring"},"children":[{"type":"element","tag":"a","props":{"href":"#envschemastring","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Env.schema.string"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Validates the value to exist and be a valid string. Empty strings fails the validations and you must use the optional variant to allow empty strings."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">APP_KEY</span><span class=\"token operator\">:</span> Env<span class=\"token punctuation\">.</span>schema<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// optional values</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">APP_KEY</span><span class=\"token operator\">:</span> Env<span class=\"token punctuation\">.</span>schema<span class=\"token punctuation\">.</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can also force the value to have one of the pre-defined formats."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token comment\">// Must be a valid host (url or ip)</span>\nEnv<span class=\"token punctuation\">.</span>schema<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> format<span class=\"token operator\">:</span> <span class=\"token string\">'host'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Must be a valid url</span>\nEnv<span class=\"token punctuation\">.</span>schema<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> format<span class=\"token operator\">:</span> <span class=\"token string\">'url'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Must be a valid email address</span>\nEnv<span class=\"token punctuation\">.</span>schema<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> format<span class=\"token operator\">:</span> <span class=\"token string\">'email'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When validating for the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"url"}]},{"type":"text","value":" format. You can also define additional options to force/ignore the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"tld"}]},{"type":"text","value":" and "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"protocol"}]},{"type":"text","value":"."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Env<span class=\"token punctuation\">.</span>schema<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> format<span class=\"token operator\">:</span> <span class=\"token string\">'url'</span><span class=\"token punctuation\">,</span> tld<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> protocol<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h4","props":{"id":"envschemaboolean"},"children":[{"type":"element","tag":"a","props":{"href":"#envschemaboolean","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Env.schema.boolean"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Enforces the value to be a valid string representation of a boolean. Following values are considered as valid booleans and are casted to "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"true"}]},{"type":"text","value":" or "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"false"}]},{"type":"text","value":"."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"'1', 'true'"}]},{"type":"text","value":" are casted to "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"true"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"'0', 'false'"}]},{"type":"text","value":" are casted to "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"false"}]}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">CACHE_VIEWS</span><span class=\"token operator\">:</span> Env<span class=\"token punctuation\">.</span>schema<span class=\"token punctuation\">.</span><span class=\"token function\">boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// optional values</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">CACHE_VIEWS</span><span class=\"token operator\">:</span> Env<span class=\"token punctuation\">.</span>schema<span class=\"token punctuation\">.</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">.</span><span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"h4","props":{"id":"envschemanumber"},"children":[{"type":"element","tag":"a","props":{"href":"#envschemanumber","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Env.schema.number"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Enforces the value to be a valid string representation of a number."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">PORT</span><span class=\"token operator\">:</span> Env<span class=\"token punctuation\">.</span>schema<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// optional values</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">PORT</span><span class=\"token operator\">:</span> Env<span class=\"token punctuation\">.</span>schema<span class=\"token punctuation\">.</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">.</span><span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"h4","props":{"id":"envschemaenum"},"children":[{"type":"element","tag":"a","props":{"href":"#envschemaenum","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Env.schema.enum"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Forces the value to be one of the pre-defined values."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">NODE_ENV</span><span class=\"token operator\">:</span> Env\n    <span class=\"token punctuation\">.</span>schema\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">enum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// optional values</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">PORT</span><span class=\"token operator\">:</span> Env\n    <span class=\"token punctuation\">.</span>schema\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">enum</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"h4","props":{"id":"custom-functions"},"children":[{"type":"element","tag":"a","props":{"href":"#custom-functions","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Custom functions"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can also define your own custom functions for validating the environment variables. Just remember the following rules:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"You must return the value after validating it."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The return value of your function will be used as the final casted value. It can be different from the input value."}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">PORT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>value <span class=\"token operator\">||</span> <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Value for PORT is required'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"casting-values-to-correct-data-types"},"children":[{"type":"element","tag":"a","props":{"href":"#casting-values-to-correct-data-types","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Casting values to correct data types"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Environment variables at Node.js level are always represented as string. Even if you have defined a boolean value inside the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":".env"}]},{"type":"text","value":" file Node.js will read and store it as a string."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Contrary to the Node.js behavior, the values validated using the AdonisJS "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Env"}]},{"type":"text","value":" module are casted to their expected data type. For example: If you validate "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"CACHE_VIEWS"}]},{"type":"text","value":" using the boolean rule, then its value will be casted to a boolean."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Env<span class=\"token punctuation\">.</span><span class=\"token function\">rules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">CACHE_VIEWS</span><span class=\"token operator\">:</span> Env<span class=\"token punctuation\">.</span>schema<span class=\"token punctuation\">.</span><span class=\"token function\">boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// In some other file</span>\nEnv<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CACHE_VIEWS'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true (boolean)</span>\nprocess<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">CACHE_VIEWS</span> <span class=\"token comment\">// 'true' (string)</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"intellisense-support"},"children":[{"type":"element","tag":"a","props":{"href":"#intellisense-support","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Intellisense support"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Being a Typescript first framework, AdonisJS makes sure that along with the runtime validations you get proper intellisense for the validated environment variables."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Copy/paste the following code snippet inside the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"contracts/env.ts"}]},{"type":"text","value":" (file path doesn't matter in this case) and all calls to "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Env.get"}]},{"type":"text","value":" will infer the types for the validated values."}]},{"type":"element","tag":"div","props":{"className":["alert","alert-note"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"All newly created applications already have this file, so feel free to ignore this section"}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'@ioc:Adonis/Core/Env'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">CustomTypes</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../env'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EnvTypes</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CustomTypes</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"src":"https://res.cloudinary.com/adonis-js/image/upload/v1603465509/adonisjs.com/env-types.png"},"children":[]}]}]}
